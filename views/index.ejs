<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML, CSS, javaScript, Node, Express" />
    <meta name="author" content="sinan goknur" />
    <title>Object Map 2022</title>

    <!-- Chart.js CDN-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- LoDash CDN-->
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>

    
    <style>
      /*@import url('https://fonts.googleapis.com/css2?family=League+Gothic&family=Open+Sans:wght@300;400;500;600;700;800&display=swap');*/
      @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500&family=Signika+Negative:wght@300;400;500;600&display=swap');

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        background-color: black;
        font-family: "Open Sans", sans-serif;
        /*NOTE FOR JEFF -- CAN YOU PLEASE UNCOMMENT FONT-SIZE & OVERFLOW FOR INSTALLATION 
        font-size: 200%;
        overflow: hidden;*/
      }

      .icon{
        z-index: 4;
        align-self: center;
        justify-self: center;
        opacity: 0;
        transition: all 1s ease-out;
      }

      #icon_stackRect{
        fill: white;
        stroke: black; 
        stroke-width: 1px;
      }

      #icon_circle{
        fill: none;
        stroke: white; 
        stroke-width: 8px;
      }

      #icon_curlyLeft{
        fill: white;
        stroke: white;
        stroke-width: 5px;
      }

      #icon_curlyRight{
        fill: white;
        stroke: white;
        stroke-width: 5px;
      }

      .coma{
        font-family: "Lucida Console", Monaco, monospace;
        font-size: 18vh;
      }

      #images_overlay{
        position: fixed; /*sit on top of page content */
      
        visibility: hidden;
        opacity: 0;
        height: 0%; /* start as not taking up any space so objects are clickable beneath*/
        overflow: hidden;
        width: 100%; /* cover the page width-wise*/
      
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0,0,0,0.7);
        z-index: 5;

        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        column-gap: 1%;
        row-gap: 2%;
        grid-template-areas:
          "a1 a2 a3"
          "b1 b2 b3"
          "c1 c2 c3";

      }

      #object_overlay{
        position: fixed; /*sit on top of page content */
      
        visibility: hidden;
        opacity: 0;
        height: 0%; /* start as not taking up any space so objects are clickable beneath*/
        overflow: hidden;
        width: 100%; /* cover the page width-wise*/
      
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0,0,0,0.7);
        z-index: 3;


        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        column-gap: 1%;
        row-gap: 5%;
        grid-template-areas:
          "a1 a2 a3"
          "b1 b2 b3"
          "c1 c2 c3";
      }

      .curlyBracket{
        color: white;
        font-weight: 400;
        font-size: 22vh;

      }

      .cbL{
        grid-area: a1;
        align-self: center;
        justify-self: center;
      }

      .cbR{
        grid-area: c3;
        align-self: center;
        justify-self: center;
      }

      .dataText{
        color: white;
        white-space: pre-line;
      }

      .dataHeading{
        color: aqua;
        /*color:  #E2FF00;*/
        cursor: pointer;
      }

      .a1{
        grid-area: a1;
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        margin-top: 20px;
        overflow-y: hidden;
      }

      .a2{
        grid-area: a2;
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        margin-top: 20px;
        overflow-y: hidden;
      }

      .a3{
        grid-area: a3;
        align-self: center;
        justify-self: left;
        margin-right: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 36vh;
        margin-top: 20px;
        /*overflow-y: scroll;*/
        overflow-y: hidden;
      }

      .b1{
        grid-area: b1;
        align-self: center;
        justify-self: left;
        margin-left: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
      }

      .b2{
        grid-area: b2;
      }

      .b3{
        grid-area: b3;
        align-self: center;
        justify-self: left;
        margin-right: 20px;
        max-width: 33vw;
        max-height: 33vh;
        /*MAKE A DECISION IS OVERFLOW HIDDEN OR SCROLL BETTER ?!?!*/
        overflow-y: hidden;
      }

      .c1{
        grid-area: c1;
        justify-self: left;
        margin-left: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      .c2{
        grid-area: c2;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      .c3{
        grid-area: c3;
        justify-self: center;
        max-width: 33vw;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      #selected_obj{
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        max-height: 33vh;
        transition: all 2s ease;
      }

      .overlayImg{
        align-self: center;
        justify-self: center;
        max-width: 32vw;
        max-height: 32vh;
      }

      #chart{
        align-self: center;
        justify-self: center;
        overflow: scroll;
      }

      a:link,
      a:visited,
      a:active,
      a:hover,
      a:focus {
        text-decoration: none;
      }

      #artGrid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        overflow: hidden;
      }
      .art_img {
        /*margin: 1px;*/
        display: block;
        position: relative;
      }
      .art_img:hover {

        cursor: pointer;

        /*outline: 1px solid lightgoldenrodyellow;*/
        /*outline: 15px solid #E2FF00;*/
        
        /* in order: x offset, y offset, blur size, spread size, color */
        /* blur size and spread size are optional (they default to 0) */
        /*box-shadow: 0px 0px 8px 15px lightgoldenrodyellow;*/
        /*box-shadow: 0px 0px 20px 30px #E2FF00;*/

        outline: 15px solid  #E2FF00;
        box-shadow: 0px 0px 20px 30px #E2FF00;
  
  
        /*this is so that the outline is not obscured by the next element*/
        z-index: 2;
      }

      .galleryTitle{
        margin-left: 20%;
      }
    </style>

    <!-- BOOTSRAP 5 -->
    <!-- Latest compiled and minified CSS -->
    <!--link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    /-->

    <!-- Latest compiled JavaScript -->
    <!--script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.bundle.min.js"></script>-->

    <!-- my css-->
    <!--<link href="css/main.css" rel="stylesheet">-->
  </head>
  <body onload="initialize()">
    
    <div id="images_overlay" onclick="imagesOverlayOff(this)">
      <img id='centerImage' class='b2 overlayImg' src='' onclick="imagesOverlayOff(this)" onmouseenter="svgHover(this)" onmouseleave="svgGone(this)" />
      
      <!-- ICON -->
     <svg id="icon_2" class="b2 icon" version="1.1"
      width="100" height="100"
      xmlns="http://www.w3.org/2000/svg" onmouseenter="svgHover(this)" onclick="imagesOverlayOff(this)">
        <g id="icon_curlyLeft" transform="scale(0.25) translate(95,100)">
          <path class="fil0" d="M0.0240945 91.8181l0 17.0428c4.52776,0.108425 8.23831,1.57016 11.1015,4.38319 2.83713,2.78492 4.74059,6.56173 5.70638,11.3043 0.933661,4.77874 1.44768,12.9789 1.4778,24.6045 0.0622441,11.6617 0.240945,19.2917 0.544134,23.0042 0.53811,5.91921 1.50791,10.6237 2.95559,14.1535 1.44768,3.52984 3.22866,6.34488 5.34295,8.44913 2.14039,2.14039 4.85504,3.74669 8.14394,4.85102 2.23276,0.783071 5.88709,1.17661 10.9509,1.17661l4.95343 0 0 -16.4043 -2.74677 0c-6.12602,0 -10.1699,-1.31717 -12.1918,-3.91736 -1.99181,-2.60823 -2.98772,-8.4913 -2.98772,-17.6191 0,-17.3982 -0.271063,-28.4556 -0.815197,-33.1239 -0.935669,-7.7022 -2.83311,-13.9065 -5.64012,-18.5467 -2.83913,-4.59602 -6.85087,-8.19815 -12.0392,-10.8004 6.78862,-3.81496 11.5553,-8.87882 14.3322,-15.1916 2.77689,-6.31276 4.16232,-16.9384 4.16232,-31.9131 0,-13.5833 0.12248,-21.681 0.421654,-24.3555 0.425669,-4.66831 1.57016,-7.91303 3.49972,-9.77031 1.90346,-1.81913 5.67626,-2.74677 11.2581,-2.74677l2.74677 0 0 -16.3983 -4.95343 0c-5.7626,0 -9.95504,0.534094 -12.5512,1.67457 -3.7728,1.53402 -6.87697,4.09807 -9.35067,7.7022 -2.4737,3.63827 -4.1061,8.19815 -4.82894,13.6937 -0.724843,5.52366 -1.14449,14.5491 -1.20673,27.0601 -0.0301181,12.5532 -0.544134,21.1831 -1.4778,25.9618 -0.965787,4.77874 -2.86925,8.55756 -5.70638,11.3405 -2.86323,2.7789 -6.57378,4.24063 -11.1015,4.3852z"/>
        </g>
        <line x1="45" y1="70" x2="55" y2="30" stroke="white" stroke-width="5px"/>
        <g id="icon_curlyRight" transform="scale(0.25) translate(255,100)">
          <path class="fil0" d="M51.2008 91.8181l0 17.0428c-4.52776,0.108425 -8.23831,1.57016 -11.1015,4.38319 -2.83713,2.78492 -4.74059,6.56173 -5.70638,11.3043 -0.933661,4.77874 -1.44768,12.9789 -1.4778,24.6045 -0.0622441,11.6617 -0.240945,19.2917 -0.544134,23.0042 -0.53811,5.91921 -1.50791,10.6237 -2.95559,14.1535 -1.44768,3.52984 -3.22866,6.34488 -5.34295,8.44913 -2.14039,2.14039 -4.85504,3.74669 -8.14394,4.85102 -2.23276,0.783071 -5.88709,1.17661 -10.9509,1.17661l-4.95343 0 0 -16.4043 2.74677 0c6.12602,0 10.1699,-1.31717 12.1918,-3.91736 1.99181,-2.60823 2.98772,-8.4913 2.98772,-17.6191 0,-17.3982 0.271063,-28.4556 0.815197,-33.1239 0.935669,-7.7022 2.83311,-13.9065 5.64012,-18.5467 2.83913,-4.59602 6.85087,-8.19815 12.0392,-10.8004 -6.78862,-3.81496 -11.5553,-8.87882 -14.3322,-15.1916 -2.77689,-6.31276 -4.16232,-16.9384 -4.16232,-31.9131 0,-13.5833 -0.12248,-21.681 -0.421654,-24.3555 -0.425669,-4.66831 -1.57016,-7.91303 -3.49972,-9.77031 -1.90346,-1.81913 -5.67626,-2.74677 -11.2581,-2.74677l-2.74677 0 0 -16.3983 4.95343 0c5.7626,0 9.95504,0.534094 12.5512,1.67457 3.7728,1.53402 6.87697,4.09807 9.35067,7.7022 2.4737,3.63827 4.1061,8.19815 4.82894,13.6937 0.724843,5.52366 1.14449,14.5491 1.20673,27.0601 0.0301181,12.5532 0.544134,21.1831 1.4778,25.9618 0.965787,4.77874 2.86925,8.55756 5.70638,11.3405 2.86323,2.7789 6.57378,4.24063 11.1015,4.3852z"/>
        </g>
        <circle id="icon_circle" cx="50" cy="50" r="45"/>
      </svg>

      <img class='a1 overlayImg' src=''/>
      <img class='a2 overlayImg' src=''/>
      <img class='a3 overlayImg' src=''/>
      <div class='b1 dataText'></div>
      <canvas width='350' height='350' class='b3' id="chart"></canvas>
      <img class='overlayImg c1' src=''/>
      <img class='overlayImg c2' src=''/>
      <img class='overlayImg c3' src=''/>
    </div>

    <div id="object_overlay" onclick="overlay_off()">
      <p class="curlyBracket cbL">{</p>
      <div class="dataText a2">parse JSON and stick some data here</div>
      <div class="dataText a3">parse JSON and stick some other data here</div>
      <div class="dataText b1">parse JSON and stick some more data here</div>

      <img id="selected_obj" class="b2" src=""  onclick="imagesOverlayOn()" onmouseenter="svgHover(this)" onmouseleave="svgGone(this)"/>
  
      <!-- ICON -->
     <svg id="icon" class="b2 icon" version="1.1"
      width="100" height="100"
      xmlns="http://www.w3.org/2000/svg" onmouseenter="svgHover(this)" onclick="imagesOverlayOn()">
        <g id="icon_stackRect" transform="scale(0.5) translate(50,50)">
          <polygon points="0, 75 50, 50 100, 75 50, 100"/>
          <polygon points="0, 50 50, 25 100, 50 50, 75"/>
          <polygon points="0, 25 50, 0 100, 25 50, 50"/>
        </g>
        <circle id="icon_circle" cx="50" cy="50" r="45"/>
      </svg>
      
      <p class="dataText b3">parse JSON and stick yet more data here</p>
      <p class="dataText c1">parse JSON and keep on sticking more data here</p>
      <p class="dataText c2">parse JSON and ok almost the last data stick here</p>
      <p class="curlyBracket cbR">}<span class="coma">,</span></p>
    </div>

    <div id="artGrid">
      <% for(let i=0; i <urlArray.length; i++) { %>
      <img
          class="art_img"
          id="<%= objIDs[i] %>"
          src="<%= urlArray[i] %>"
          onError="this.style.display='none'"
      />
      <% } %>
    </div>
    <script>

      /*make sure the size for thumbnailSize matches the one set in server side script index.js */
      const thumbnailSize = 108;
      /*global variable to store JSON for object selected */
      let json_data_selectedObj;

      /*to be used for the chart object*/
      let myChart;

      let allData = [];

      let gallery_sorted = [];

      function initialize(){
        /*Attach the selectArtObject function to every image displayed*/
        /*Also save initial order because it is already sorted on gallery */ 
        let images = document.querySelectorAll(".art_img");
       
        for (let i=0; i< images.length; i++){
          images[i].addEventListener("click", selectArtObject);
          gallery_sorted.push({g_id : images[i].id, g_src : images[i].src});
        }

        //Read in the JSON
        fetch('/static/allData.json')
        .then(response => response.json())
        .then(data => {
          console.log(JSON.stringify(data[3].info.pages));
          //clean and merge the data
          for(let i=0; i<data.length; i++){
            allData = allData.concat(data[i].records);
          }
          //console.log(`allData has ${allData.length} items`);
          //console.log(`random object access trying ${allData[1600].images[0].iiifbaseuri}`);
        });
      }

      function sortClick(event){
        //console.log(`SORT IS CLICKED WITH CLASS ${event.target.className} AND WITH TEXT ${event.target.textContent}`);
        
        //stop event propagation so that overlay_off does not get triggered
        event.stopPropagation();
        
        
        let term_sort = event.target.textContent;
        term_sort = term_sort.replace(/\s+/g, '');
        term_sort = term_sort.slice(0, -1);
        console.log(`term sort is ${term_sort}`);
        
        let url_sorted ='';
        let artGrid_sorted = '';

        /*If the term is gallerynumber or [gallery] floor, then simply restore artGrid to its 
        initial order */
        if((term_sort === 'gallerynumber') || (term_sort === '[gallery] floor')){
          for(let i = 0; i < gallery_sorted.length; i++){
            artGrid_sorted += `<img class="art_img" id=${gallery_sorted[i].g_id} src=${gallery_sorted[i].g_src} onError="this.style.display='none'"/>`;
          }
        } else {
          if (term_sort === 'dated'){
          term_sort = 'dateend';}
          
          allData = _.sortBy(allData, term_sort);
     
          for (let i=0; i< allData.length; i++){
            url_sorted = allData[i].images[0].iiifbaseuri + "/square/" + thumbnailSize + ",/0/default.jpg";
            //console.log(`sorted object is ${allData[i].id}`);
            artGrid_sorted += `<img class="art_img" id=${allData[i].id} src=${url_sorted} onError="this.style.display='none'"/>`;
          }
        }

        
        //change the innerHTML of artGrid
        document.getElementById('artGrid').innerHTML = artGrid_sorted;

        /*onclick="selectArtObject()" somehow did not work so
        Once again attach the selectArtObject function to every image displayed*/
        let images = document.querySelectorAll(".art_img");
        for (let i=0; i< images.length; i++){
          images[i].addEventListener("click", selectArtObject);
        }
      }

      
      /*Fetch JSON based on object ID when object is selected*/
      function selectArtObject(evt){
        console.log(`selected art object is ${evt.target.id}`);

          fetch(`/object/${this.id}`).then(response => {
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
              throw new TypeError("Oops, we haven't got JSON!");
            }
            return response.json();
          }).then(data => {
            //console.log(JSON.stringify(data));

            json_data_selectedObj = data;
            //let selected_object_data = data;

            overlay_on(json_data_selectedObj, true);

          }).catch(error=> console.error(error));
    
      }

      function overlay_on(data, transitionBoolean){

        if(transitionBoolean){
          console.log("Boolean TRUE");
          document.getElementById("object_overlay").style.transition = "opacity 0.5s ease-in";
        }else{
          console.log("Boolean FALSE");
          document.getElementById("object_overlay").style.transition = '';
        }

        let base_iiif_uri = data.images[0].iiifbaseuri;
        //console.log(`base uri is ${base_iiif_uri}`);
        let img_url = base_iiif_uri + "/full/max/0/default.jpg";
        
        /* turn on the div */
        document.getElementById("object_overlay").style.height = '100%';
        document.getElementById("object_overlay").style.visibility = 'visible';
        document.getElementById("object_overlay").style.opacity = '1';
        //document.getElementById("selected_obj").src = url;
        document.getElementById("selected_obj").src = img_url;

        
        let html_a2 = '<p>';
        if (data.titlescount > 0){
          html_a2 += '<span class="dataHeading" onclick="sortClick(event)">title: </span> ' +  data.title + '\n';
        } if (data.people){
          html_a2 += '<strong>people: </strong>' + '\n' + JSON.stringify(data.people, function (key, value){
            if (value !== null){
              return value;
            } 
          }) + '\n';
        }
        if (data.dated){
          html_a2 += '<span class="dataHeading" onclick="sortClick(event)">dated: </span> ' + data.dated + '\n';

        } if (data.accessionyear){
          html_a2 += '<span class="dataHeading" onclick="sortClick(event)">accessionyear: </span> ' + data.accessionyear;
        }
        html_a2 += '</p>';

      

        let html_a3 = '<p>';
        if(data.division){
          html_a3 += '<span class="dataHeading" onclick="sortClick(event)">division: </span> ' + data.division + '\n';
        }if (data.century){
          html_a3 += '<strong>century: </strong>' + data.century + '\n';
        }if (data.culture){
          html_a3 += '<span class="dataHeading" onclick="sortClick(event)">culture: </span> ' + data.culture + '\n';
        } if (data.classification){
          html_a3 += '<span class="dataHeading" onclick="sortClick(event)">classification: </span> ' + data.classification + '\n';
        }if (data.description){
          html_a3 += '<strong>description: </strong>' + data.description + '\n';
        }if (data.provenance){
          html_a3 += '<strong>provenance: </strong>' + data.provenance.replace(/(\r\n|\n|\r)/gm, "");
        }
        html_a3 += '</p>';
        

        let html_b1 = '<p>';
        if(data.department){
          html_b1 += '<span class="dataHeading" onclick="sortClick(event)">department: </span> ' + data.department + '\n';
        }if(data.objectnumber){
          html_b1 += '<strong>objectnumber: </strong>' + data.objectnumber + '\n';
        }if(data.objectid){
          html_b1 += '<span class="dataHeading" onclick="sortClick(event)">objectid: </span> ' + data.objectid + '\n';
        }
        if(data.contact){
          html_b1 += '<strong>contact: </strong>' + data.contact + '\n';
        }if(data.exhibitioncount){
          html_b1 += '<span class="dataHeading" onclick="sortClick(event)">exhibitioncount: </span> ' + data.exhibitioncount + '\n';
        }if(data.publicationcount){
          html_b1 += '<span class="dataHeading" onclick="sortClick(event)">publicationcount: </span> ' + data.publicationcount + '\n';
        }if(data.creditline){
          html_b1 += '<strong>creditline: </strong>' + data.creditline;
        }
        html_b1 += '</p>';

        let html_b3 = '<p>';
        if (data.colorcount){
          html_b3 += '<span class="dataHeading" onclick="sortClick(event)">colorcount: </span> ' + data.colorcount + '\n';
        } if (data.worktype){
          html_b3 += '<strong>worktype: </strong>' + data.worktype + '\n';
        } if (data.dimensions) {
          html_b3 += '<strong>dimensions: </strong>' + data.dimensions + '\n';
        } if (data.medium) {
          html_b3 += '<span class="dataHeading" onclick="sortClick(event)">medium: </span> ' + data.medium + '\n';
        } 
        if (data.technique){
          html_b3 += '<span class="dataHeading" onclick="sortClick(event)">technique: </span> ' + data.technique + '\n';
        } if (data.colors){
          html_b3 += '<strong>colors: </strong>' + '\n' + JSON.stringify(data.colors, function(key, value){
            if(key === 'spectrum'){
              return undefined;
            }
            if (key === 'percent'){
              return value.toFixed(2);
            }
            return value; 
          });
        }
        html_b3 += '</p>'

        let html_c1 = '<p>';
        if(data.url){
           html_c1 += '<strong>url: </strong>' + data.url + '\n';
        } if (data.primaryimageurl){
          html_c1 += '<strong>primaryimageurl: </strong>' + data.primaryimageurl + '\n';
        } if (data.rank){
          html_c1 += '<span class="dataHeading" onclick="sortClick(event)">rank: </span> ' + data.rank + '\n';
        }if (data.totalpageviews){
          html_c1 += '<strong>totalpageviews: </strong>' + data.totalpageviews + '\n';
        } if (data.lastupdate){
          html_c1 += '<strong>lastupdate: </strong>' + data.lastupdate + '\n';
        } if (data.dateoffirstpageview){
          html_c1 += '<strong>dateoffirstpageview: </strong>' + data.dateoffirstpageview + '\n';
        } if (data.dateoflastpageview){
          html_c1 += '<strong>dateoflastpageview: </strong>' + data.dateoflastpageview;
        } /*if (data.images){
          html_c1 += 'images: ' + JSON.stringify(data.images);
        }*/
        html_c1 += '</p>';

        let html_c2 = '<p>';
        if(data.verificationlevel){
          html_c2 += '<strong>verificationlevel: </strong>' + data.verificationlevel + '\n';
        }if (data.verificationleveldescription){
          html_c2 += '<strong>verificationleveldescription: </strong>' + data.verificationleveldescription + '\n';
        }if (data.accesslevel){
          if (data.accesslevel > 0){
            html_c2 += '<strong>accesslevel:</strong> public' + '\n';
          }else {
            html_c2 += '<strong>accesslevel:</strong> restricted' + '\n';
          }
        }if (data.imagecount){
          html_c2 += '<span class="dataHeading" onclick="sortClick(event)">imagecount: </span> ' + data.imagecount + '\n';
        }if (data.datebegin){
          html_c2 += '<strong>datebegin: </strong>' + data.datebegin + '\n';
        }if (data.dateend){
          html_c2 += '<strong>dateend: </strong>' + data.dateend + '\n';
        }if (data.copyright){
          html_c2 += '<strong>copyright: </strong>' + data.copyright;
        }
        html_c2 += '</p>';

        //Place populated html on grid
        let data_texts = document.querySelectorAll('#object_overlay > .dataText');
        data_texts[0].innerHTML = html_a2;
        data_texts[1].innerHTML = html_a3;
        data_texts[2].innerHTML = html_b1;
        data_texts[3].innerHTML = html_b3;
        data_texts[4].innerHTML = html_c1;
        data_texts[5].innerHTML = html_c2;

      }

     

      function overlay_off(){

        document.getElementById("object_overlay").style.height = '0%';
        document.getElementById("object_overlay").style.visibility = 'hidden';
        document.getElementById("object_overlay").style.opacity = '0';
        document.getElementById("selected_obj").src = "";

      }

    
      function imagesOverlayOn(){
     
        /*turn off first overlay*/
        overlay_off();

        /* turn on the images overlay */
        document.getElementById("images_overlay").style.height = '100%';
        document.getElementById("images_overlay").style.visibility = 'visible';
        document.getElementById("images_overlay").style.opacity = '1';
        
        let b1_img_html = '<p class="galleryTitle">';
          if (json_data_selectedObj.gallery.gallerynumber){
            b1_img_html += '<span class="dataHeading" onclick="sortClick(event)">gallerynumber: </span>' + json_data_selectedObj.gallery.gallerynumber + '\n';
          }if (json_data_selectedObj.gallery.floor){
            b1_img_html += '<span class="dataHeading" onclick="sortClick(event)">[gallery] floor: </span>' + json_data_selectedObj.gallery.floor +'\n';
          }if (json_data_selectedObj.gallery.name){
            b1_img_html += '<strong>[gallery] name: </strong>' + json_data_selectedObj.gallery.name + '\n';
          }if (json_data_selectedObj.gallery.theme){
            b1_img_html += '<strong>[gallery] theme: </strong>' + json_data_selectedObj.gallery.theme;
          }
        b1_img_html += '</p>';
      
        document.querySelectorAll('#images_overlay > .dataText')[0].innerHTML = b1_img_html;
        
        let count = json_data_selectedObj.imagecount;
        console.log(`there are ${count} images for this object`);

        let xtraImages = document.querySelectorAll('.overlayImg');
        for(let i=0; i<count; i++){
          if(i < xtraImages.length){
            xtraImages[i].src = json_data_selectedObj.images[i].iiifbaseuri + "/full/max/0/default.jpg";
          }
         
        }

        let canvas = document.getElementById('chart');
        let ctx = canvas.getContext('2d');

        let clr_count = json_data_selectedObj.colorcount;
        let chrt_data = [];
        let colors_chrt = [];
        for (let i=0; i<clr_count; i++){
          chrt_data.push(json_data_selectedObj.colors[i].percent);
          colors_chrt.push(json_data_selectedObj.colors[i].color);
        }

        let data = {
          labels: '',
          datasets: [{
            label: '',
            data: chrt_data,
            backgroundColor: colors_chrt,
            borderColor: 'rgba(255,255,255,0.3)',
          }]};

        let config = {
          type: 'doughnut',
          data: data,
          options: {}
        };

        myChart = new Chart(
          document.getElementById('chart'), config );
      }

      function imagesOverlayOff(x){
        
        document.getElementById("images_overlay").style.height = '0%';
        document.getElementById("images_overlay").style.visibility = 'hidden';
        document.getElementById("images_overlay").style.opacity = '0';
        //erase images
        let rmvImages = document.querySelectorAll('.overlayImg');
        for(let i=0; i<rmvImages.length; i++){
          rmvImages[i].src = '';

        }
        //remove chart
        myChart.destroy();
        
        if ((x.id ===  'centerImage') || (x.id === 'icon_2')){
          overlay_on(json_data_selectedObj, false);
        }
       
      }

      function svgHover(x){
        /*document.getElementById("selected_obj").style.filter = "grayscale(60) blur(3px)";*/

        if ((x.id === 'icon') || (x.id === 'selected_obj')){
          document.getElementById("selected_obj").style.filter = "grayscale(90) brightness(30%) blur(1px)";
          document.getElementById("selected_obj").style.cursor = "pointer";
          document.getElementById("icon").style.opacity = '1';
          document.getElementById("icon").style.cursor = "pointer";
        } else {
          document.getElementById("centerImage").style.filter = "grayscale(90) brightness(30%) blur(1px)";
          document.getElementById("centerImage").style.cursor = "pointer";
          document.getElementById("icon_2").style.opacity = '1';
          document.getElementById("icon_2").style.cursor = "pointer";
        }
        


        /*outline: 3px solid white;*/
        /*box-shadow: 0px 0px 10px 4px lightgoldenrodyellow;*/
      }

      function svgGone(x){
        if ((x.id === 'icon') || (x.id === 'selected_obj')){
          document.getElementById("selected_obj").style.filter = "grayscale(0) blur(0px)";
          document.getElementById("icon").style.opacity = '0';
        }else{
          document.getElementById("centerImage").style.filter = "grayscale(0) blur(0px)";
          document.getElementById("icon_2").style.opacity = '0';
        }
      }

    

    </script>
  </body>
</html>
