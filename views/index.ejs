<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML, CSS, javaScript, Node, Express" />
    <meta name="author" content="sinan goknur" />
    <title>Object Map 2022</title>

    <!-- Chart.js CDN-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    
    <style>
      /*@import url('https://fonts.googleapis.com/css2?family=League+Gothic&family=Open+Sans:wght@300;400;500;600;700;800&display=swap');*/
      @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500&family=Signika+Negative:wght@300;400;500;600&display=swap');

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        background-color: black;
        font-family: "Open Sans", sans-serif;
      }

      #icon{
        z-index: 4;
        align-self: center;
        justify-self: center;
        opacity: 0;
        transition: all 1s ease-out;
      }

      #icon_stackRect{
        fill: white;
        stroke: black; 
        stroke-width: 1px;
      }

      #icon_circle{
        fill: none;
        stroke: white; 
        stroke-width: 8px;
      }

      .coma{
        font-family: "Lucida Console", Monaco, monospace;
        font-size: 18vh;
      }

      #images_overlay{
        position: fixed; /*sit on top of page content */
      
        visibility: hidden;
        opacity: 0;
        height: 0%; /* start as not taking up any space so objects are clickable beneath*/
        overflow: hidden;
        width: 100%; /* cover the page width-wise*/
      
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0,0,0,0.7);
        z-index: 5;

        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        column-gap: 1%;
        row-gap: 2%;
        grid-template-areas:
          "a1 a2 a3"
          "b1 b2 b3"
          "c1 c2 c3";

      }

      #object_overlay{
        position: fixed; /*sit on top of page content */
      
        visibility: hidden;
        opacity: 0;
        height: 0%; /* start as not taking up any space so objects are clickable beneath*/
        overflow: hidden;
        width: 100%; /* cover the page width-wise*/
      
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0,0,0,0.7);
        z-index: 3;


        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        column-gap: 1%;
        row-gap: 5%;
        grid-template-areas:
          "a1 a2 a3"
          "b1 b2 b3"
          "c1 c2 c3";
      }

      .curlyBracket{
        color: white;
        font-weight: 400;
        font-size: 22vh;

      }

      .cbL{
        grid-area: a1;
        align-self: center;
        justify-self: center;
      }

      .cbR{
        grid-area: c3;
        align-self: center;
        justify-self: center;
      }

      .dataText{
        color: white;
        white-space: pre-line;
      }

      .dataHeading{
        color: aqua;
      }

      .a1{
        grid-area: a1;
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        margin-top: 20px;
        overflow-y: hidden;
      }

      .a2{
        grid-area: a2;
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        margin-top: 20px;
        overflow-y: hidden;
      }

      .a3{
        grid-area: a3;
        align-self: center;
        justify-self: left;
        margin-right: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        margin-top: 20px;
        /*overflow-y: hidden;*/
        overflow-y: scroll;
      }

      .b1{
        grid-area: b1;
        align-self: center;
        justify-self: left;
        margin-left: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
      }

      .b2{
        grid-area: b2;
      }

      .b3{
        grid-area: b3;
        align-self: center;
        justify-self: left;
        margin-right: 20px;
        max-width: 33vw;
        max-height: 33vh;
        /*MAKE A DECISION IS OVERFLOW HIDDEN OR SCROLL BETTER ?!?!*/
        overflow-y: scroll;
      }

      .c1{
        grid-area: c1;
        justify-self: left;
        margin-left: 20px;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      .c2{
        grid-area: c2;
        justify-self: center;
        max-width: 33vw;
        overflow-wrap: break-word;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      .c3{
        grid-area: c3;
        justify-self: center;
        max-width: 33vw;
        max-height: 33vh;
        overflow-y: hidden;
        margin-bottom: 20px;
      }

      #selected_obj{
        align-self: center;
        justify-self: center;
        max-width: 33vw;
        max-height: 33vh;
        transition: all 2s ease;
      }

      .overlayImg{
        align-self: center;
        justify-self: center;
        max-width: 30vw;
        max-height: 30vh;
      }

      #chart{
        align-self: center;
        justify-self: center;
        overflow: scroll;
      }

      a:link,
      a:visited,
      a:active,
      a:hover,
      a:focus {
        text-decoration: none;
      }

      #artGrid {
        display: flex;
        flex-wrap: wrap;
      }
      .art_img {
        /*margin: 1px;*/
        display: block;
        position: relative;
      }
      .art_img:hover {

        cursor: pointer;

        /*outline: 1px solid lightgoldenrodyellow;*/
        outline: 6px solid white;
        /* in order: x offset, y offset, blur size, spread size, color */
        /* blur size and spread size are optional (they default to 0) */
        /*box-shadow: 0px 0px 8px 15px lightgoldenrodyellow;*/
        box-shadow: 0px 0px 10px 15px white;

        /*this is so that the outline is not obscured by the next element*/
        z-index: 2;
      }
    </style>

    <!-- BOOTSRAP 5 -->
    <!-- Latest compiled and minified CSS -->
    <!--link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    /-->

    <!-- Latest compiled JavaScript -->
    <!--script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.bundle.min.js"></script>-->

    <!-- my css-->
    <!--<link href="css/main.css" rel="stylesheet">-->
  </head>
  <body>
    
    <div id="images_overlay" onclick="imagesOverlayOff(this)">
      <img id='centerImage' class='b2 overlayImg' src='' onclick="imagesOverlayOff(this)" />
      <img class='a1 overlayImg' src=''/>
      <img class='a2 overlayImg' src=''/>
      <img class='a3 overlayImg' src=''/>
      <div class='b1 dataText'></div>
      <canvas width='350' height='350' class='b3' id="chart"></canvas>
      <img class='overlayImg c1' src=''/>
      <img class='overlayImg c2' src=''/>
      <img class='overlayImg c3' src=''/>
    </div>

    <div id="object_overlay" onclick="overlay_off()">
      <p class="curlyBracket cbL">{</p>
      <div class="dataText a2">parse JSON and stick some data here</div>
      <div class="dataText a3">parse JSON and stick some other data here</div>
      <div class="dataText b1">parse JSON and stick some more data here</div>

      <img id="selected_obj" class="b2" src=""  onclick="imagesOverlayOn()" onmouseenter="svgHover()" onmouseleave="svgGone()"/>
  
      <!-- ICON -->
     <svg id="icon" class="b2" version="1.1"
      width="100" height="100"
      xmlns="http://www.w3.org/2000/svg" onmouseenter="svgHover()" onclick="imagesOverlayOn()">
        <g id="icon_stackRect" transform="scale(0.5) translate(50,50)">
          <polygon points="0, 75 50, 50 100, 75 50, 100"/>
          <polygon points="0, 50 50, 25 100, 50 50, 75"/>
          <polygon points="0, 25 50, 0 100, 25 50, 50"/>
        </g>
        <circle id="icon_circle" cx="50" cy="50" r="45"/>
      </svg>
      
      <p class="dataText b3">parse JSON and stick yet more data here</p>
      <p class="dataText c1">parse JSON and keep on sticking more data here</p>
      <p class="dataText c2">parse JSON and ok almost the last data stick here</p>
      <p class="curlyBracket cbR">}<span class="coma">,</span></p>
    </div>

    <div id="artGrid">
      <% for(let i=0; i <urlArray.length; i++) { %>
      <img
          class="art_img"
          id="<%= objIDs[i] %>"
          src="<%= urlArray[i] %>"
          onError="this.style.display='none'"
      />
      <% } %>
    </div>
    <script>
      /*global variable to store JSON for object selected */
      let json_data_selectedObj;

      /*to be used for the chart object*/
      let myChart;

      /*Attach the selectArtObject function to every image displayed*/
      let images = document.querySelectorAll(".art_img");
      for (let i=0; i< images.length; i++){
        images[i].addEventListener("click", selectArtObject);
      }

      /*Fetch JSON based on object ID when object is selected*/
      function selectArtObject(){
        console.log(this.id);

          fetch(`http://localhost:3000/object/${this.id}`).then(response => {
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
              throw new TypeError("Oops, we haven't got JSON!");
            }
            return response.json();
          }).then(data => {
            //console.log(JSON.stringify(data));

            
            //Save data 
            json_data_selectedObj = data;
            //let selected_object_data = data;

            /*PROCESS AND SHOW JSON DATA IN A GRID OVERLAY*/
            //STORE IIIF _URLs and Color Info for Second Page of Overlay


            //base_iiif_uri = data.images[0].iiifbaseuri;
            //console.log(`base uri is ${base_iiif_uri}`);
            //let img_url = base_iiif_uri + "/full/max/0/default.jpg";
            //console.log(`image url is ${img_url}`);
            //document.getElementById("selected_obj").src = img_url;

            //overlay_on(img_url, selected_object_data);
            overlay_on(json_data_selectedObj, true);

          }).catch(error=> console.error(error));
    
      }

      function overlay_on(data, transitionBoolean){

        if(transitionBoolean){
          console.log("Boolean TRUE");
          document.getElementById("object_overlay").style.transition = "opacity 0.5s ease-in";
        }else{
          console.log("Boolean FALSE");
          document.getElementById("object_overlay").style.transition = '';
        }

        let base_iiif_uri = data.images[0].iiifbaseuri;
        //console.log(`base uri is ${base_iiif_uri}`);
        let img_url = base_iiif_uri + "/full/max/0/default.jpg";
        
        /* turn on the div */
        document.getElementById("object_overlay").style.height = '100%';
        document.getElementById("object_overlay").style.visibility = 'visible';
        document.getElementById("object_overlay").style.opacity = '1';
        //document.getElementById("selected_obj").src = url;
        document.getElementById("selected_obj").src = img_url;

        
        let html_a2 = '<p>';
        if (data.titlescount > 0){
          html_a2 += '<span class="dataHeading">title: </span> ' +  data.title + '\n';
        } if (data.people){
          html_a2 += 'people: ' + '\n' + JSON.stringify(data.people, function (key, value){
            if (value !== null){
              return value;
            } 
          }) + '\n';
        }
        if (data.dated){
          html_a2 += '<span class="dataHeading">dated: </span> ' + data.dated + '\n';

        } if (data.accessionyear){
          html_a2 += '<span class="dataHeading">accessionyear: </span> ' + data.accessionyear;
        }
        html_a2 += '</p>';

      

        let html_a3 = '<p>';
        if(data.division){
          html_a3 += '<span class="dataHeading">division: </span> ' + data.division + '\n';
        }if (data.century){
          html_a3 += '<span class="dataHeading">century: </span> ' + data.century + '\n';
        }if (data.culture){
          html_a3 += '<span class="dataHeading">culture: </span> ' + data.culture + '\n';
        } if (data.classification){
          html_a3 += '<span class="dataHeading">classification: </span> ' + data.classification + '\n';
        }if (data.description){
          html_a3 += 'description: ' + data.description + '\n';
        }if (data.provenance){
          html_a3 += 'provenance: ' + data.provenance;
        }
        html_a3 += '</p>';
        

        let html_b1 = '<p>';
        if(data.department){
          html_b1 += '<span class="dataHeading">department: </span> ' + data.department + '\n';
        }if(data.objectnumber){
          html_b1 += '<span class="dataHeading">objectnumber: </span> ' + data.objectnumber + '\n';
        }if(data.objectid){
          html_b1 += '<span class="dataHeading">objectid: </span> ' + data.objectid + '\n';
        }
        if(data.contact){
          html_b1 += 'contact: ' + data.contact + '\n';
        }if(data.exhibitioncount){
          html_b1 += '<span class="dataHeading">exhibitioncount: </span> ' + data.exhibitioncount + '\n';
        }if(data.publicationcount){
          html_b1 += '<span class="dataHeading">publicationcount: </span> ' + data.publicationcount + '\n';
        }if(data.creditline){
          html_b1 += 'creditline: ' + data.creditline;
        }
        html_b1 += '</p>';

        let html_b3 = '<p>';
        if (data.colorcount){
          html_b3 += '<span class="dataHeading">colorcount: </span> ' + data.colorcount + '\n';
        } if (data.worktype){
          html_b3 += 'worktype: ' + data.worktype + '\n';
        } if (data.dimensions) {
          html_b3 += '<span class="dataHeading">dimensions: </span> ' + data.dimensions + '\n';
        } if (data.medium) {
          html_b3 += '<span class="dataHeading">medium: </span> ' + data.medium + '\n';
        } 
        if (data.technique){
          html_b3 += '<span class="dataHeading">technique: </span> ' + data.technique + '\n';
        } if (data.colors){
          html_b3 += 'colors: ' + '\n' + JSON.stringify(data.colors, function(key, value){
            if(key === 'spectrum'){
              return undefined;
            }
            if (key === 'percent'){
              return value.toFixed(2);
            }
            return value; 
          });
        }
        html_b3 += '</p>'

        let html_c1 = '<p>';
        if(data.url){
           html_c1 += 'url: ' + data.url + '\n';
        } if (data.primaryimageurl){
          html_c1 += 'primaryimageurl: ' + data.primaryimageurl + '\n';
        } if (data.rank){
          html_c1 += '<span class="dataHeading">rank: </span> ' + data.rank + '\n';
        }if (data.totalpageviews){
          html_c1 += 'totalpageviews: ' + data.totalpageviews + '\n';
        } if (data.lastupdate){
          html_c1 += 'lastupdate: ' + data.lastupdate + '\n';
        } if (data.dateoffirstpageview){
          html_c1 += 'dateoffirstpageview: ' + data.dateoffirstpageview + '\n';
        } if (data.dateoflastpageview){
          html_c1 += 'dateoflastpageview: ' + data.dateoflastpageview;
        } /*if (data.images){
          html_c1 += 'images: ' + JSON.stringify(data.images);
        }*/
        html_c1 += '</p>';

        let html_c2 = '<p>';
        if(data.verificationlevel){
          html_c2 += '<span class="dataHeading">verificationlevel: </span> ' + data.verificationlevel + '\n';
        }if (data.verificationleveldescription){
          html_c2 += 'verificationleveldescription: ' + data.verificationleveldescription + '\n';
        }if (data.accesslevel){
          if (data.accesslevel > 0){
            html_c2 += 'accesslevel: public ' + '\n';
          }else {
            html_c2 += 'accesslevel: restricted' + '\n';
          }
        }if (data.imagecount){
          html_c2 += '<span class="dataHeading">imagecount: </span> ' + data.imagecount + '\n';
        }if (data.datebegin){
          html_c2 += '<span class="dataHeading">datebegin: </span> ' + data.datebegin + '\n';
        }if (data.dateend){
          html_c2 += '<span class="dataHeading">dateend: </span> ' + data.dateend + '\n';
        }if (data.copyright){
          html_c2 += 'copyright: ' + data.copyright;
        }
        html_c2 += '</p>';

        //Place populated html on grid
        let data_texts = document.querySelectorAll('#object_overlay > .dataText');
        data_texts[0].innerHTML = html_a2;
        data_texts[1].innerHTML = html_a3;
        data_texts[2].innerHTML = html_b1;
        data_texts[3].innerHTML = html_b3;
        data_texts[4].innerHTML = html_c1;
        data_texts[5].innerHTML = html_c2;

        for(let i =0; i< data_texts.length; i++){
          
          console.log(`hey my class is ${data_texts[i].className}`);
        }
        /*document.getElementById("obj_txt_1").textContent = selected_object_data.objectnumber;*/


      }

     

      function overlay_off(){
        document.getElementById("object_overlay").style.height = '0%';
        document.getElementById("object_overlay").style.visibility = 'hidden';
        document.getElementById("object_overlay").style.opacity = '0';
        document.getElementById("selected_obj").src = "";

      }

    
      function imagesOverlayOn(){
     
        /*turn off first overlay*/
        overlay_off();

        /* turn on the images overlay */
        document.getElementById("images_overlay").style.height = '100%';
        document.getElementById("images_overlay").style.visibility = 'visible';
        document.getElementById("images_overlay").style.opacity = '1';
        
        '<span class="dataHeading">title: </span> '
        let b1_img_html = '<p>';
          if (json_data_selectedObj.gallery.gallerynumber){
            b1_img_html += '<span class="dataHeading"> gallerynumber: </span>' + json_data_selectedObj.gallery.gallerynumber + '\n';
          }if (json_data_selectedObj.gallery.floor){
            b1_img_html += '<span class="dataHeading"> [gallery] floor: </span>' + json_data_selectedObj.gallery.floor +'\n';
          }if (json_data_selectedObj.gallery.name){
            b1_img_html += '<span class="dataHeading"> [gallery] name: </span>' + json_data_selectedObj.gallery.name + '\n';
          }if (json_data_selectedObj.gallery.theme){
            b1_img_html += '<span class="dataHeading"> [gallery] theme: </span>' + json_data_selectedObj.gallery.theme;
          }
        b1_img_html += '</p>';
      
        document.querySelectorAll('#images_overlay > .dataText')[0].innerHTML = b1_img_html;
        
        let count = json_data_selectedObj.imagecount;
        console.log(`there are ${count} images for this object`);

        let xtraImages = document.querySelectorAll('.overlayImg');
        for(let i=0; i<count; i++){
          if(i < xtraImages.length){
            xtraImages[i].src = json_data_selectedObj.images[i].iiifbaseuri + "/full/max/0/default.jpg";
          }
         
        }

        let canvas = document.getElementById('chart');
        let ctx = canvas.getContext('2d');

        let clr_count = json_data_selectedObj.colorcount;
        let chrt_data = [];
        let colors_chrt = [];
        for (let i=0; i<clr_count; i++){
          chrt_data.push(json_data_selectedObj.colors[i].percent);
          colors_chrt.push(json_data_selectedObj.colors[i].color);
        }

        let data = {
          labels: '',
          datasets: [{
            label: '',
            data: chrt_data,
            backgroundColor: colors_chrt,
            borderColor: 'rgba(255,255,255,0.3)',
          }]};

        let config = {
          type: 'doughnut',
          data: data,
          options: {}
        };

        myChart = new Chart(
          document.getElementById('chart'), config );
      }

      function imagesOverlayOff(x){
        
        document.getElementById("images_overlay").style.height = '0%';
        document.getElementById("images_overlay").style.visibility = 'hidden';
        document.getElementById("images_overlay").style.opacity = '0';
        //erase images
        let rmvImages = document.querySelectorAll('.overlayImg');
        for(let i=0; i<rmvImages.length; i++){
          rmvImages[i].src = '';

        }
        //remove chart
        myChart.destroy();
        
        if (x.id ===  'centerImage'){
          overlay_on(json_data_selectedObj, false);
        }
       
      }

      function svgHover(){
        /*document.getElementById("selected_obj").style.filter = "grayscale(60) blur(3px)";*/
        document.getElementById("selected_obj").style.filter = "grayscale(90) brightness(30%) blur(1px)";
        document.getElementById("selected_obj").style.cursor = "pointer";
        document.getElementById("icon").style.opacity = '1';
        document.getElementById("icon").style.cursor = "pointer";


        /*outline: 3px solid white;*/
        /*box-shadow: 0px 0px 10px 4px lightgoldenrodyellow;*/
      }

      function svgGone(){
        document.getElementById("selected_obj").style.filter = "grayscale(0) blur(0px)";
        document.getElementById("icon").style.opacity = '0';
      }

    

    </script>
  </body>
</html>
